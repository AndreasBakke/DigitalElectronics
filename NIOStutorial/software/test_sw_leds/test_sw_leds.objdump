
test_sw_leds.elf:     file format elf32-littlenios2
test_sw_leds.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000001fc memsz 0x000001fc flags r-x
    LOAD off    0x0000121c vaddr 0x0000021c paddr 0x00000220 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00000224 vaddr 0x00000224 paddr 0x00000224 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001220  2**0
                  CONTENTS
  2 .text         000001e4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00000204  00000204  00001204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0000021c  00000220  0000121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000224  00000224  00001224  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000230  00000230  00001220  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00000b7c  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000787  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000005d7  00000000  00000000  000026db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000001ac  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000003bf  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00003220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00003230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005c  00000000  00000000  00003250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000572  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00000194  00000000  00000000  0000381e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  000047d2  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000047d5  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000047e1  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000047e2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000047e3  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000047ee  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000047f9  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00004804  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  0000480f  2**0
                  CONTENTS, READONLY
 28 .jdi          000052e6  00000000  00000000  0000483e  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00038ec3  00000000  00000000  00009b24  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000204 l    d  .rodata	00000000 .rodata
0000021c l    d  .rwdata	00000000 .rwdata
00000224 l    d  .bss	00000000 .bss
00000230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
000000f8 g     F .text	0000002c alt_main
00000220 g       *ABS*	00000000 __flash_rwdata_start
00000124 g     F .text	00000038 alt_putstr
000001b8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000228 g     O .bss	00000004 alt_argv
0000821c g       *ABS*	00000000 _gp
000001c0 g     F .text	00000028 memcpy
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000230 g       *ABS*	00000000 __bss_end
000001b0 g     F .text	00000004 alt_dcache_flush_all
00000220 g       *ABS*	00000000 __ram_rwdata_end
0000021c g       *ABS*	00000000 __ram_rodata_end
0000021c g     O .rwdata	00000004 jtag_uart_0
00000230 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	00000030 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
0000017c g     F .text	00000004 alt_sys_init
0000021c g       *ABS*	00000000 __ram_rwdata_start
00000204 g       *ABS*	00000000 __ram_rodata_start
00000230 g       *ABS*	00000000 __alt_stack_base
00000224 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000018 main
00000224 g     O .bss	00000004 alt_envp
00000204 g       *ABS*	00000000 __flash_rodata_start
0000015c g     F .text	00000020 alt_irq_init
0000022c g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000220 g       *ABS*	00000000 _edata
00000230 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000001e8 g     F .text	0000001c strlen
000001b4 g     F .text	00000004 alt_icache_flush_all
00000074 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a08714 	ori	gp,gp,33308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10808914 	ori	r2,r2,548

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c08c14 	ori	r3,r3,560

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000740 	call	74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00000f80 	call	f8 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
{ 
  60:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  64:	21008104 	addi	r4,r4,516
{ 
  68:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  6c:	00001240 	call	124 <alt_putstr>

  /* Event loop never exits. */
  while (1);
  70:	003fff06 	br	70 <main+0x14>

00000074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  74:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  78:	01000034 	movhi	r4,0
  7c:	01400034 	movhi	r5,0
  80:	dfc00015 	stw	ra,0(sp)
  84:	21008704 	addi	r4,r4,540
  88:	29408804 	addi	r5,r5,544
  8c:	21400426 	beq	r4,r5,a0 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
  90:	01800034 	movhi	r6,0
  94:	31808804 	addi	r6,r6,544
  98:	310dc83a 	sub	r6,r6,r4
  9c:	00001c00 	call	1c0 <memcpy>
  if (to != from)
  a0:	01000034 	movhi	r4,0
  a4:	01400034 	movhi	r5,0
  a8:	21000804 	addi	r4,r4,32
  ac:	29400804 	addi	r5,r5,32
  b0:	21400426 	beq	r4,r5,c4 <alt_load+0x50>
      *to++ = *from++;
  b4:	01800034 	movhi	r6,0
  b8:	31800804 	addi	r6,r6,32
  bc:	310dc83a 	sub	r6,r6,r4
  c0:	00001c00 	call	1c0 <memcpy>
  if (to != from)
  c4:	01000034 	movhi	r4,0
  c8:	01400034 	movhi	r5,0
  cc:	21008104 	addi	r4,r4,516
  d0:	29408104 	addi	r5,r5,516
  d4:	21400426 	beq	r4,r5,e8 <alt_load+0x74>
      *to++ = *from++;
  d8:	01800034 	movhi	r6,0
  dc:	31808704 	addi	r6,r6,540
  e0:	310dc83a 	sub	r6,r6,r4
  e4:	00001c00 	call	1c0 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  e8:	00001b00 	call	1b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  ec:	dfc00017 	ldw	ra,0(sp)
  f0:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
  f4:	00001b41 	jmpi	1b4 <alt_icache_flush_all>

000000f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  fc:	0009883a 	mov	r4,zero
{
 100:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 104:	000015c0 	call	15c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 108:	000017c0 	call	17c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 10c:	d1a00217 	ldw	r6,-32760(gp)
 110:	d1600317 	ldw	r5,-32756(gp)
 114:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 118:	dfc00017 	ldw	ra,0(sp)
 11c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 120:	000005c1 	jmpi	5c <main>

00000124 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 124:	defffe04 	addi	sp,sp,-8
 128:	dc000015 	stw	r16,0(sp)
 12c:	dfc00115 	stw	ra,4(sp)
 130:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 134:	00001e80 	call	1e8 <strlen>
 138:	01000034 	movhi	r4,0
 13c:	000f883a 	mov	r7,zero
 140:	100d883a 	mov	r6,r2
 144:	800b883a 	mov	r5,r16
 148:	21008704 	addi	r4,r4,540
#else
    return fputs(str, stdout);
#endif
#endif
}
 14c:	dfc00117 	ldw	ra,4(sp)
 150:	dc000017 	ldw	r16,0(sp)
 154:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 158:	00001801 	jmpi	180 <altera_avalon_jtag_uart_write>

0000015c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 15c:	deffff04 	addi	sp,sp,-4
 160:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 164:	00001b80 	call	1b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 168:	00800044 	movi	r2,1
 16c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 170:	dfc00017 	ldw	ra,0(sp)
 174:	dec00104 	addi	sp,sp,4
 178:	f800283a 	ret

0000017c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
 17c:	f800283a 	ret

00000180 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 180:	21000017 	ldw	r4,0(r4)
{
 184:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
 188:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 18c:	29800136 	bltu	r5,r6,194 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 190:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 194:	20c00137 	ldwio	r3,4(r4)
 198:	18ffffec 	andhi	r3,r3,65535
 19c:	183ffb26 	beq	r3,zero,18c <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 1a0:	28c00007 	ldb	r3,0(r5)
 1a4:	29400044 	addi	r5,r5,1
 1a8:	20c00035 	stwio	r3,0(r4)
 1ac:	003ff706 	br	18c <altera_avalon_jtag_uart_write+0xc>

000001b0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1b0:	f800283a 	ret

000001b4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1b4:	f800283a 	ret

000001b8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1b8:	000170fa 	wrctl	ienable,zero
}
 1bc:	f800283a 	ret

000001c0 <memcpy>:
 1c0:	2005883a 	mov	r2,r4
 1c4:	0007883a 	mov	r3,zero
 1c8:	30c0011e 	bne	r6,r3,1d0 <memcpy+0x10>
 1cc:	f800283a 	ret
 1d0:	28cf883a 	add	r7,r5,r3
 1d4:	39c00003 	ldbu	r7,0(r7)
 1d8:	10c9883a 	add	r4,r2,r3
 1dc:	18c00044 	addi	r3,r3,1
 1e0:	21c00005 	stb	r7,0(r4)
 1e4:	003ff806 	br	1c8 <memcpy+0x8>

000001e8 <strlen>:
 1e8:	2005883a 	mov	r2,r4
 1ec:	10c00007 	ldb	r3,0(r2)
 1f0:	1800021e 	bne	r3,zero,1fc <strlen+0x14>
 1f4:	1105c83a 	sub	r2,r2,r4
 1f8:	f800283a 	ret
 1fc:	10800044 	addi	r2,r2,1
 200:	003ffa06 	br	1ec <strlen+0x4>
